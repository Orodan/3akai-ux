/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'oae.core', 'moment', 'bootstrap', 'bootstrap.datetimepicker'], function($, oae, moment) {

    var notifications = {
        'schedule': false,
        'vote': false
    };

    /**
     * Change the active view
     *
     * @param  {String} pageToActive    id of the view to active
     * @return {void}                   null
     */
    var toggleActiveView = function (viewToActive) {

        var pages = ['loodle', 'add-schedule', 'delete-schedule'];

        // Show the chosen page
        pages.forEach(function (page) {
            $('#' + page + '-page').addClass('hide');
            $('#' + page).parent().removeClass('active');
        });

        //  Active the correct item on the navbar
        $('#' + viewToActive + '-page').toggleClass('hide');
        $('#' + viewToActive).parent().addClass('active');

        // Keep trace of the active view
        currentView = viewToActive;

    };

    /**
     * Format the loodle's schedules to easily display the loodle
     *
     * @param  {Object} loodle  loodle data
     * @return {void}           null
     */
    var formatSchedules = function (loodle, lang) {

        if (loodle.schedules.length === 0)
            return;

        // Keep trace of the default schedules array
        loodle.defaultSchedules = [];

        // Format the schedules to display them in the current language
        $.each(loodle.schedules, function (key, schedule) {
            schedule.begin_time = moment(schedule.begin_time).locale(lang.split('_')[0]);
            schedule.end_time = moment(schedule.end_time).locale(lang.split('_')[0]);

            loodle.defaultSchedules.push(schedule);
        });

        var months = [];
        var days   = [];
        var hours  = [];

        loodle.schedules.forEach(function (schedule) {

            // Format to the locale lang
            var moment_begin_time = moment(schedule.begin_time).locale(lang.split('_')[0]);
            var moment_end_time   = moment(schedule.end_time).locale(lang.split('_')[0]);

            // MONTHS ==============================================

            // If we have no months registred, we just add the first one we check
            if (months.length === 0) {
                months.push({
                    time: moment_begin_time,
                    nbSchedules: 2
                });
            }
            // Else, we check if the current month we are looking at is already registred,
            // ie if we already have the same month in a previous schedule. If it's the case
            // we do not add the same month again but instead we increment by 2 the number of
            // schedules registred in this month.
            else {
                var monthAlreadyPresent = false;

                months.forEach(function (month) {
                    if (month.time.format('MMMM YYYY') === moment_begin_time.format('MMMM YYYY')) {
                        monthAlreadyPresent = true;
                        month.nbSchedules += 2;
                    }
                });

                // No schedule already registred with that month, we add it
                if (!monthAlreadyPresent) {
                    months.push({
                        time: moment_begin_time,
                        nbSchedules: 2
                    });
                }
            }

            // DAYS ==============================================

            // If we have no days registred, we just add the first one we check
            if (days.length === 0) {
                days.push({
                    time: moment_begin_time,
                    nbSchedules: 2
                });
            }
            // Else, we check if the current day we are looking at is already registred,
            // ie if we already have the same day in a previous schedule. If it's the case
            // we do not add the same day again but instead we increment by 2 the number of
            // schedules registred in this day.
            else {
                var dayAlreadyPresent = false;

                days.forEach(function (day) {
                    if (day.time.format('dddd D') === moment_begin_time.format('dddd D')) {
                        dayAlreadyPresent = true;
                        day.nbSchedules += 2;
                    }
                });

                // No schedule already registred with that day, we add it
                if(!dayAlreadyPresent) {
                    days.push({
                        time: moment_begin_time,
                        nbSchedules: 2
                    });
                }
            }

            // HOURS ==============================================
            hours.push(moment_begin_time);
            hours.push(moment_end_time);

            schedule.begin_time = moment(schedule.begin_time);
            schedule.end_time   = moment(schedule.end_time);

            loodle.schedules.months = months;
            loodle.schedules.days   = days;
            loodle.schedules.hours  = hours;

        });

    };

    /**
     * Format the loodle's users to easily display the loodle
     *
     * @param  {Object} loodle  loodle data
     */
    var formatUsers = function (loodle) {

        if (loodle.users.length === 0)
            return;

        loodle.users.forEach(function (user) {

            user.votes = [];

            loodle.votes.forEach(function (vote) {
                if (user.id === vote.user_id)
                    user.votes.push(vote);
            });
        });

    };

    /**
     * Handle the notifications to send
     *
     * @param  {String}     widgetId    Widget identifier
     * @param  {String}     type        Notification type
     */
    var handleNotifications = function (widgetData, type) {

        var alreadySend = false;
        var notificationType = '';

        // We do not send notifications on update from public users
        if (!widgetData.loodleData.currentUser.status === 'temporary') {

            $.each(notifications, function (key, isAlreadySend) {
                if (key === type) {
                    if (isAlreadySend) {
                        alreadySend = true;
                    } else {
                        notifications[key] = true;
                        notificationType = key;
                    }
                }
            });

            if (!alreadySend) {
                oae.api.doodle.sendNotifications(widgetData.id, notificationType, function (err) {
                    if (err) {
                        console.log('An error occured : ', err);
                        oae.api.util.notification(
                            oae.api.i18n.translate('__MSG__DOODLE_NOTIFICATIONS_NOT_SENT__', 'doodle'),
                            oae.api.i18n.translate('__MSG__DOODLE_NOTIFICATIONS_COULD_NOT_BE_SENT__', 'doodle'));
                    }
                });
            }

        }

    };

    /**
     * Update the view of the loodle with the current loodle data
     *
     * @param  {Object}     widgetData      Widget data
     * @param  {String}     locale          Language currently use by the user
     */
    var updateLoodleDisplay = function (widgetData, locale) {

        oae.api.doodle.getData(widgetData.loodleData.id, function (err, loodle) {

            if (err) {
                console.log('An error occured trying to get the loodle data : ', err);
                oae.api.util.notification(
                    oae.api.i18n.translate('__MSG__UNEXPECTED_ERROR__', 'doodle'),
                    oae.api.i18n.translate('__MSG__DOODLE_DISPLAY_COULD_NOT_BE_UPDATED__', 'doodle'));
                return;
            }

            // Sort the users array so that the current user always has his name at the bottom of the table
            var index = 0;
            var currentUser = {};
            for (var i = 0; i < loodle.users.length; i++) {
                if (loodle.users[i].id == widgetData.loodleData.currentUser.id) {
                    index = i;
                    currentUser = loodle.users[i];
                }
            }


            loodle.users.splice(index, 1);
            loodle.users.push(currentUser);

            // We keep a trace of the current user
            loodle.currentUser = widgetData.loodleData.currentUser;

            // Format loodle data to easily display
            formatSchedules(loodle, oae.data.me.locale);
            formatUsers(loodle);

            // Update the loodle view with the updated data
            updateLoodleView(loodle);

            // Change the active page
            toggleActiveView('loodle');

            // Update the delete schedule view with the new schedule added
            updateDeleteScheduleView(loodle);

        });

    };

    /**
     * Render the loodle updated in the page
     *
     * @param  {Object} loodle  Loodle data updated
     */
    var updateLoodleView = function (loodle) {

        var table = '<table class="table table-striped table-hover table-non-fluid" id="loodle-table">';

        var thead = '<thead>';

        if (loodle.schedules.length === 0) {
            thead += '<tr></tr>';
        } else {
            thead += '<tr>';
            thead += '<th>#</th>';

            $.each(loodle.schedules.months, function (key, month) {
                thead += '<th colspan="' + month.nbSchedules + '">';
                thead += month.time.format('MMMM YYYY');
                thead += '</th>';
            });

            thead += '</tr>';
            thead += '<tr>';
            thead += '<th>#</th>';

            $.each(loodle.schedules.days, function (key, day) {
                thead += '<th colspan="' + day.nbSchedules + '">';
                thead += day.time.format('dddd D');
                thead += '</th>';
            });

            thead += '</tr>';
            thead += '<tr>';
            thead += '<th>#</th>';

            $.each(loodle.schedules.hours, function (key, hour) {
                thead += '<th>';
                thead += hour.format('LT');
                thead += '</th>';
            });

            thead += '</tr>';

        }

        thead += '</thead>';

        var tbody = '<tbody>';

        $.each(loodle.users, function (key, user) {
            tbody += '<tr>';

            if (loodle.currentUser.id === user.id) {

                tbody += '<td>';
                tbody += '<strong>' + user.first_name + ' ' + user.last_name + '</strong>';
                tbody += '</td>';

                $.each(user.votes, function (key, vote) {
                    tbody += '<td colspan="2">';
                    tbody += '<span class="span-vote glyphicon';
                    tbody += (vote.vote === 1) ? ' glyphicon-ok text-success' : ' glyphicon-remove text-danger';
                    tbody += '"></span>';
                    tbody += '<input class="hide input-vote" type="checkbox"';
                    tbody += (vote.vote === 1) ? ' checked ' : ' ';
                    tbody += 'data-id="' + vote.vote_id;
                    tbody += '"/>';
                    tbody += '</td>';
                });

            } else {

                tbody += '<td>' + user.first_name + ' ' + user.last_name + '</td>';

                $.each(user.votes, function (key, vote) {
                    tbody += '<td colspan="2">';
                    tbody += '<span class="glyphicon';
                    tbody += (vote.vote === 1) ? ' glyphicon-ok text-success' : ' glyphicon-remove text-danger';
                    tbody += '"></span>';
                    tbody += '</td>';
                });

            }

            tbody += '</tr>';

        });

        tbody += '</tbody>';

        table += thead;
        table += tbody;
        table += '</table>';

        $('#loodle-table').replaceWith(table);

        // In case the user was in the middle of an update on his/her availabilities,
        // we hide the button save-votes again

        if (!$('#save-votes').hasClass('hide')) {
            $('#edit-votes').toggleClass('hide');
            $('#save-votes').toggleClass('hide');
        }
    };

    /**
     * Update the delete schedule view of the widget with the new data
     *
     * @param  {Object} loodle  Loodle data updated
     */
    var updateDeleteScheduleView = function (loodle) {

        if (loodle.defaultSchedules === undefined) {

            var content = '<p class="text-center">No schedule to delete.</p>';
            $('.delete-schedule-container').html(content);

        }
        else {

            var select = '<div class="form-group">';
            select += '<label for="scheduleId">Choose a schedule to delete</label>';
            select += '<select name="scheduleId" class="form-control">';

            $.each(loodle.defaultSchedules, function (key, schedule) {
                var option = '<option value ="' + schedule.id + '">';
                option += schedule.begin_time.format('llll');
                option += '-';
                option += schedule.end_time.format('llll');
                option += '</option>';

                select += option;
            });

            select += '</select>';
            select += '</div>';

            var button = '<div class="text-center">';
            button += '<button class="btn" id="deleteScheduleButton">Delete</button>';
            button += '</div>';

            var content = select + button;

            $('.delete-schedule-container').html(content);

        }

    };

    return function(uid, showSettings, widgetData) {

        var updatedSchedule = false;
        var updatedVote     = false;

        // Cache the widget container
        var $rootel = $('#' + uid);

        // Loodle data
        var loodle = widgetData.loodleData;

        // Pages setup
        var navigationBar = [];
        var defaultView = '';
        var currentView = '';

        var setUpNavigationbar = function () {

            // If the current user is not manager, he can only access the loodle view
            if (!widgetData.isManager) {
                navigationBar = [{id: 'loodle', title: 'Loodle',}];
            }
            // The current user is manager, he can access any views
            else {
                navigationBar = [
                    {id: 'loodle', title: 'Loodle'},
                    {id: 'add-schedule', title: 'Add schedule'},
                    {id: 'delete-schedule', title: 'Delete schedule'}
                ];
            }

        };

        var setUpNavigationBarEvents = function () {

            for (item in navigationBar) {
                $(document).on('click', '#' + navigationBar[item].id, function (ev) {
                    ev.preventDefault();
                    toggleActiveView($(this).attr('id'));
                });
            }

        };

        var setUpActiveView = function () {

            if(!widgetData.isManager)
                defaultView = 'loodle';
            else
                defaultView = (loodle.schedules.length === 0) ? 'add-schedule' : 'loodle';

            currentView = defaultView;

            $('#' + defaultView + "-page").toggleClass('hide');
            $('#' + defaultView).parent().toggleClass('active');

        };

        var setUpDateTimePicker = function () {

            $('#datetimepicker1').datetimepicker({
                locale: oae.data.me.locale.split('_')[0],
                minDate: new Date()
            });

            $('#datetimepicker2').datetimepicker({
                locale: oae.data.me.locale.split('_')[0],
                minDate: new Date()
            });

        };

        var setUpLoodleEvents = function () {

            $(document).on('click', '#addScheduleButton', function (ev) {
                ev.preventDefault();

                oae.api.doodle.addSchedule(widgetData.loodleData.id, $('#begin_time').val(), $('#end_time').val(), function (err) {
                    if (err) {
                        console.log('An error occured : ', err);
                        oae.api.util.notification(
                            oae.api.i18n.translate('__MSG__DOODLE_CHANGES_NOT_SAVED__', 'doodle'),
                            oae.api.i18n.translate('__MSG__DOODLE_CHANGES_COULD_NOT_BE_SAVED__', 'doodle'));
                    }
                    else {
                        updatedSchedule = true;

                        var notifications = {
                            'schedule': updatedSchedule,
                            'vote': updatedVote
                        };

                        handleNotifications(widgetData, 'schedule');

                        // Update the loodle dislay
                        updateLoodleDisplay(widgetData, oae.data.me.locale);
                    }
                });

            });

            /**
             * Callback on the click on the delete schedule button, "this" represents the widget data
             *
             * @param  {Object} ev  Standard event object
             */
            var deleteSchedule = function (ev) {
                ev.preventDefault();

                var that = this;

                oae.api.doodle.deleteSchedule(this.loodleData.id, $('select[name="scheduleId"]').val(), function (err) {
                    if (err) {
                        console.log('An error occured trying to delete a schedule : ', err);
                        oae.api.util.notification(
                            oae.api.i18n.translate('__MSG__DOODLE_CHANGES_NOT_SAVED__', 'doodle'),
                            oae.api.i18n.translate('__MSG__DOODLE_CHANGES_COULD_NOT_BE_SAVED__', 'doodle'));
                        return;
                    }

                    // Dynamic refresh of the widget
                    updateLoodleDisplay(that, oae.data.me.locale);
                })
            };

            $(document).on('click', '#deleteScheduleButton', deleteSchedule.bind(widgetData));

            $(document).on('click', '#edit-votes', function (ev) {
                ev.preventDefault();

                $('#edit-votes').toggleClass('hide');
                $('#save-votes').toggleClass('hide');

                $('.span-vote').toggleClass('hide');
                $('.input-vote').toggleClass('hide');
            });

            $(document).on('click', '#save-votes', function (ev) {
                ev.preventDefault();

                $('.span-vote').toggleClass('hide');
                $('.input-vote').toggleClass('hide');

                $('#edit-votes').toggleClass('hide');
                $('#save-votes').toggleClass('hide');

                var $votes = $('.input-vote');

                var votes = {};
                for (var i = 0; i < $votes.length; i++) {
                    votes[$($votes[i]).data('id')] = ($votes[i].checked) ? 1 : 0 ;
                }

                oae.api.doodle.updateVotes(votes, widgetData.loodleData.id, function (err) {
                    if (err) {
                        console.log('An error occured : ', err);
                        oae.api.util.notification(
                            oae.api.i18n.translate('__MSG__DOODLE_CHANGES_NOT_SAVED__', 'doodle'),
                            oae.api.i18n.translate('__MSG__DOODLE_CHANGES_COULD_NOT_BE_SAVED__', 'doodle'));
                    }

                    // Update the display of votes

                    // Update the spans showing the disponibility
                    for (var i = 0; i < $votes.length; i++) {
                        $.each(votes, function (key, available) {
                            if (key  === $($votes[i]).data('id')) {

                                var sibblingSpan = $($votes[i]).prev();

                                if (available) {
                                    sibblingSpan.removeClass('glyphicon-ok glyphicon-remove text-success text-danger')
                                        .addClass('glyphicon-ok text-success');
                                }
                                else {
                                    sibblingSpan.removeClass('glyphicon-ok glyphicon-remove text-success text-danger')
                                        .addClass('glyphicon-remove text-danger');
                                }
                            }
                        });
                    }

                    handleNotifications(widgetData, 'vote');

                });

            });

            $(document).on('click', '#save-changes', function (ev) {
                ev.preventDefault();

                var $user = $('#new-user');
                var user = $.trim($user.val());;
                var splitName = user.split(' ');

                var firstName = '',
                    lastName = '';

                if (splitName.length === 2) {
                    firstName = splitName[0];
                    lastName = splitName[1];
                }
                else if (splitName.length == 1) {
                    if (splitName[0] === "") {
                        // Emit notification if the user try to add a blank name
                        oae.api.util.notification(
                            oae.api.i18n.translate('__MSG__DOODLE_CHANGES_NOT_SAVED__', 'doodle'),
                            oae.api.i18n.translate('__MSG__INVALID_USER_NAME__', 'doodle'));
                    }
                    else {
                        firstName = splitName[0];
                    }
                }
                else {
                    firstName = splitName[0];
                    for (var i = 1; i < splitName.length; i++) {
                        lastName += splitName[i] + ' ';
                    }
                    lastName = $.trim(lastName);
                }

                var $votes = $('.input-vote');

                var votes = {};
                for (var i = 0; i < $votes.length; i++) {
                    votes[$($votes[i]).data('id')] = ($votes[i].checked) ? 1 : 0 ;
                }

                oae.api.doodle.addMemberWithVotes(loodle.id, firstName, lastName, votes, function (err, newUser) {
                    if (err) {
                        console.log('An error occured : ', err);
                        oae.api.util.notification(
                            oae.api.i18n.translate('__MSG__DOODLE_CHANGES_NOT_SAVED__', 'doodle'),
                            oae.api.i18n.translate('__MSG__DOODLE_CHANGES_COULD_NOT_BE_SAVED__', 'doodle'));
                    }

                    $('#save-changes').toggleClass('hide');
                    $('#edit-votes').toggleClass('hide');

                    // Update the loodle dislay
                    widgetData.loodleData.currentUser = newUser;
                    updateLoodleDisplay(widgetData, oae.data.me.locale);
                });

            });

            // End of user access update
            $(document).on('oae.manageaccess.done', function () {
                location.reload();
            });

        };

        // Prepare the navigation bar according to the user privilege
        setUpNavigationbar();
        // Set up the events on the page
        setUpLoodleEvents();

        // Format loodle data to easily display
        formatSchedules(loodle, oae.data.me.locale);
        formatUsers(loodle);

        // Render the loodle data
        oae.api.util.template().render($('#doodle-template', $rootel), {
            'loodle': widgetData.loodleData,
            'navigationBar': navigationBar
            // 'currentUser': {}
        },
        $('#doodle-container', $rootel));

        // Set up the rendered page
        setUpActiveView();
        setUpDateTimePicker();
        setUpNavigationBarEvents();

    };

});
